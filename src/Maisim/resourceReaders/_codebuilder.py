# file importing code builder
# 请在每次添加或删除新资源文件後运行此脚本
import os

pyRootRoute = './src/Maisim/resource/'
rootRoute = '../resource/'
saveRootRoute = './src/Maisim/resourceReaders/'


def tip(fo):
    fo.write("// This file was automatically generated by _codebuilder.py.\n// これは _codebuilder.py で自動的に生成したファイルです。\n// 这个文件是由 _codebuilder.py 自动生成的。\n\n")


def uiIcons():
    dictName = 'maimai_img/ui'
    root = rootRoute + dictName + '/'
    iconNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.png')]

    fo = open(saveRootRoute + "uiIconReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in iconNames:
        fo.write("import " + name + "_icon from '" +
                 root + name + ".png';\n")

    fo.write('\n')

    # object
    fo.write('export const uiIcon = {\n')
    for name in iconNames:
        fo.write("    " + name + ": "+name + "_icon,\n")
    fo.write("};\n")

    fo.close()


def effectsIcons():
    dictName = 'maimai_img/effect'
    root = rootRoute + dictName + '/'
    iconNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.png')]

    fo = open(saveRootRoute + "effectIconReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in iconNames:
        fo.write("import " + name + "_icon from '" +
                 root + name + ".png';\n")

    fo.write('\n')

    # object
    fo.write('export const EffectIcon = {\n')
    for name in iconNames:
        fo.write("    " + name + ": new Image(),\n")

    fo.write("};\n")

    fo.write('\n')

    # init
    fo.write(
        'export const initeffecticons = (onProgress: (amount: number, loaded: number, name: string) => void, onload: () => void) => {\n')
    fo.write("  const amount = " + str(len(iconNames)) + ";\n")
    fo.write("  let loaded = 0;\n")
    for name in iconNames:
        fo.write("  EffectIcon." + name + ".src = " + name + "_icon;\n")
        fo.write("  EffectIcon." + name +
                 ".onload = () => { loaded++; if (loaded >= amount) onload(); else onProgress(amount, loaded, '" + name + "'); }\n")
    fo.write("};\n")
    fo.close()


def notesIcons():
    dictName = 'maimai_img/notes'
    root = rootRoute + dictName + '/'
    iconNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.png')]

    fo = open(saveRootRoute + "noteIconReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in iconNames:
        fo.write("import " + name + "_icon from '" +
                 root + name + ".png';\n")

    fo.write('\n')

    # object
    fo.write('export const NoteIcon = {\n')
    for name in iconNames:
        fo.write("    " + name + ": new Image(),\n")

    fo.write("};\n")

    fo.write('\n')

    # init
    fo.write(
        'export const initnotesicons = (onProgress: (amount: number, loaded: number, name: string) => void, onload: () => void) => {\n')
    fo.write("  const amount = " + str(len(iconNames)) + ";\n")
    fo.write("  let loaded = 0;\n")
    for name in iconNames:
        fo.write("  NoteIcon." + name + ".src = " + name + "_icon;\n")
        fo.write("  NoteIcon." + name +
                 ".onload = () => { loaded++; if (loaded >= amount) onload(); else onProgress(amount, loaded, '" + name + "'); }\n")
    fo.write("};\n")
    fo.close()


def judgeIcons():
    dictName = 'maimai_img/judge'
    root = rootRoute + dictName + '/'
    iconNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.png')]

    fo = open(saveRootRoute + "judgeIconReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in iconNames:
        fo.write("import " + name + "_icon from '" +
                 root + name + ".png';\n")

    fo.write('\n')

    # object
    fo.write('export const JudgeIcon = {\n')
    for name in iconNames:
        fo.write("    " + name + ": new Image(),\n")

    fo.write("};\n")

    fo.write('\n')

    # init
    fo.write(
        'export const initjudgeicons = (onProgress: (amount: number, loaded: number, name: string) => void, onload: () => void) => {\n')
    fo.write("  const amount = " + str(len(iconNames)) + ";\n")
    fo.write("  let loaded = 0;\n")
    for name in iconNames:
        fo.write("  JudgeIcon." + name + ".src = " + name + "_icon;\n")
        fo.write("  JudgeIcon." + name +
                 ".onload = () => { loaded++; if (loaded >= amount) onload(); else onProgress(amount, loaded, '" + name + "'); }\n")
    fo.write("};\n")
    fo.close()


def notesSounds():
    dictName = 'sound/note'
    root = rootRoute + dictName + '/'
    soundNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.wav')]

    fo = open(saveRootRoute + "noteSoundReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in soundNames:
        fo.write("import " + name + "_sound from '" +
                 root + name + ".wav';\n")

    fo.write('\n')

    # object
    fo.write('export const NoteSound = {\n')
    for name in soundNames:
        fo.write("    " + name + ": new Audio(),\n")

    fo.write("};\n")

    fo.write('\n')

    # init
    fo.write(
        'export const initnotesounds = (onProgress: (amount: number, loaded: number, name: string) => void, onload: () => void) => {\n')
    fo.write("  const amount = " + str(len(soundNames)) + ";\n")
    fo.write("  let loaded = 0;\n")
    fo.write("  let volume = 0.05;\n")
    for name in soundNames:
        fo.write("  NoteSound." + name + ".src = " + name + "_sound;\n")
        fo.write("  NoteSound." + name + ".volume = volume;\n")
        fo.write("  NoteSound." + name +
                 ".oncanplaythrough = () => { loaded++; if (loaded >= amount) onload(); else onProgress(amount, loaded, '" + name + "'); }\n")

    fo.write("  onload();\n")
    fo.write("};\n")
    fo.close()


def main():
    notesIcons()
    uiIcons()
    effectsIcons()
    judgeIcons()
    notesSounds()


if __name__ == '__main__':
    main()
